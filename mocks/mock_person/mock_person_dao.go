// Code generated by MockGen. DO NOT EDIT.
// Source: github/carrymec/families/person (interfaces: DaoClient)

// Package mock_person is a generated GoMock package.
package mock_person

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	common "github/carrymec/families/common"
	person "github/carrymec/families/person"
	reflect "reflect"
)

// MockDaoClient is a mock of DaoClient interface
type MockDaoClient struct {
	ctrl     *gomock.Controller
	recorder *MockDaoClientMockRecorder
}

// MockDaoClientMockRecorder is the mock recorder for MockDaoClient
type MockDaoClientMockRecorder struct {
	mock *MockDaoClient
}

// NewMockDaoClient creates a new mock instance
func NewMockDaoClient(ctrl *gomock.Controller) *MockDaoClient {
	mock := &MockDaoClient{ctrl: ctrl}
	mock.recorder = &MockDaoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDaoClient) EXPECT() *MockDaoClientMockRecorder {
	return m.recorder
}

// CheckExistByName mocks base method
func (m *MockDaoClient) CheckExistByName(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistByName", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistByName indicates an expected call of CheckExistByName
func (mr *MockDaoClientMockRecorder) CheckExistByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistByName", reflect.TypeOf((*MockDaoClient)(nil).CheckExistByName), arg0, arg1)
}

// CheckExistRelationship mocks base method
func (m *MockDaoClient) CheckExistRelationship(arg0 context.Context, arg1, arg2 int64, arg3 common.RelationType) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistRelationship", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistRelationship indicates an expected call of CheckExistRelationship
func (mr *MockDaoClientMockRecorder) CheckExistRelationship(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistRelationship", reflect.TypeOf((*MockDaoClient)(nil).CheckExistRelationship), arg0, arg1, arg2, arg3)
}

// CreatePerson mocks base method
func (m *MockDaoClient) CreatePerson(arg0 context.Context, arg1 person.Person) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerson", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePerson indicates an expected call of CreatePerson
func (mr *MockDaoClientMockRecorder) CreatePerson(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerson", reflect.TypeOf((*MockDaoClient)(nil).CreatePerson), arg0, arg1)
}

// CreateRelationship mocks base method
func (m *MockDaoClient) CreateRelationship(arg0 context.Context, arg1, arg2 int64, arg3 common.RelationType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRelationship", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRelationship indicates an expected call of CreateRelationship
func (mr *MockDaoClientMockRecorder) CreateRelationship(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelationship", reflect.TypeOf((*MockDaoClient)(nil).CreateRelationship), arg0, arg1, arg2, arg3)
}

// FindById mocks base method
func (m *MockDaoClient) FindById(arg0 context.Context, arg1 int64) (person.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0, arg1)
	ret0, _ := ret[0].(person.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById
func (mr *MockDaoClientMockRecorder) FindById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockDaoClient)(nil).FindById), arg0, arg1)
}

// Query mocks base method
func (m *MockDaoClient) Query(arg0 context.Context, arg1 person.Query) ([]person.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1)
	ret0, _ := ret[0].([]person.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockDaoClientMockRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDaoClient)(nil).Query), arg0, arg1)
}

// Update mocks base method
func (m *MockDaoClient) Update(arg0 context.Context, arg1 int64, arg2 person.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockDaoClientMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDaoClient)(nil).Update), arg0, arg1, arg2)
}
