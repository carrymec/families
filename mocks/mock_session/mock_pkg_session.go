// Code generated by MockGen. DO NOT EDIT.
// Source: github/carrymec/families/pkg (interfaces: PersonSessionWithContext)

// Package mock_session is a generated GoMock package.
package mock_session

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	neo4j "github.com/neo4j/neo4j-go-driver/v5/neo4j"
	reflect "reflect"
)

// MockPersonSessionWithContext is a mock of PersonSessionWithContext interface
type MockPersonSessionWithContext struct {
	ctrl     *gomock.Controller
	recorder *MockPersonSessionWithContextMockRecorder
}

// MockPersonSessionWithContextMockRecorder is the mock recorder for MockPersonSessionWithContext
type MockPersonSessionWithContextMockRecorder struct {
	mock *MockPersonSessionWithContext
}

// NewMockPersonSessionWithContext creates a new mock instance
func NewMockPersonSessionWithContext(ctrl *gomock.Controller) *MockPersonSessionWithContext {
	mock := &MockPersonSessionWithContext{ctrl: ctrl}
	mock.recorder = &MockPersonSessionWithContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPersonSessionWithContext) EXPECT() *MockPersonSessionWithContextMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method
func (m *MockPersonSessionWithContext) BeginTransaction(arg0 context.Context, arg1 ...func(*neo4j.TransactionConfig)) (neo4j.ExplicitTransaction, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BeginTransaction", varargs...)
	ret0, _ := ret[0].(neo4j.ExplicitTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction
func (mr *MockPersonSessionWithContextMockRecorder) BeginTransaction(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockPersonSessionWithContext)(nil).BeginTransaction), varargs...)
}

// Close mocks base method
func (m *MockPersonSessionWithContext) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockPersonSessionWithContextMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPersonSessionWithContext)(nil).Close), arg0)
}

// ExecuteRead mocks base method
func (m *MockPersonSessionWithContext) ExecuteRead(arg0 context.Context, arg1 neo4j.ManagedTransactionWork, arg2 ...func(*neo4j.TransactionConfig)) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteRead", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteRead indicates an expected call of ExecuteRead
func (mr *MockPersonSessionWithContextMockRecorder) ExecuteRead(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteRead", reflect.TypeOf((*MockPersonSessionWithContext)(nil).ExecuteRead), varargs...)
}

// ExecuteWrite mocks base method
func (m *MockPersonSessionWithContext) ExecuteWrite(arg0 context.Context, arg1 neo4j.ManagedTransactionWork, arg2 ...func(*neo4j.TransactionConfig)) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteWrite", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteWrite indicates an expected call of ExecuteWrite
func (mr *MockPersonSessionWithContextMockRecorder) ExecuteWrite(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteWrite", reflect.TypeOf((*MockPersonSessionWithContext)(nil).ExecuteWrite), varargs...)
}

// Run mocks base method
func (m *MockPersonSessionWithContext) Run(arg0 context.Context, arg1 string, arg2 map[string]interface{}, arg3 ...func(*neo4j.TransactionConfig)) (neo4j.ResultWithContext, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(neo4j.ResultWithContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockPersonSessionWithContextMockRecorder) Run(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockPersonSessionWithContext)(nil).Run), varargs...)
}
